module            =  { SOI ~ (directive | clause)* ~ EOI }
external_handle   =  { SOI ~ atom ~ ("::" ~ atom)* ~ arity ~ EOI }
question          =  { SOI ~ body ~ EOI }

directive         =  { ":-" ~ instruction ~ "." }
instruction       =  { nat | mod_ | use_ | pub_ | mut_ | inc | op | test }
nat               =  { "nat" ~ "(" ~ handle ~ ")" }
mod_              =  { "mod" ~ "(" ~ atom ~ ")" }
use_              =  { "use" ~ "(" ~ multi_handle ~ ")" }
pub_              =  { "pub" ~ "(" ~ (handle | operator) ~ ")" }
mut_              =  { "mut" ~ "(" ~ handle ~ ")" }
inc               =  { "inc" ~ "(" ~ handle ~ ")" }
op                =  { "op" ~ "(" ~ operator ~ "," ~ handle ~ ("," ~ (left | right) ~ "," ~ integer_10)? ~ ")" }
test              =  { "test" ~ "(" ~ body ~ ")" }

left          =  { "left" }
right         =  { "right" }

multi_handle      =  { module_path ~ ("(" ~ handles ~ ","? ~ ")")? }
module_path       =  { scope | scope_prefix }

scope_prefix      =  { (up ~ ("::" ~ up)* | root | lib)  }
    up            =  { "^" }
    root          =  { "~" }
    lib           = ${ "@" ~ atom }

scope             =  { (scope_prefix ~ "::")? ~ atom ~ ("::" ~ atom)* }

handles           =  { (handle | operator | alias) ~ ("," ~ (handle | operator | alias))* }
alias             =  { "alias" ~ "(" ~ handle ~ "," ~ "as" ~ ":" ~ handle ~ ")" }
handle            =  { atom ~ arity }
arity             =  { "/" ~ integer_10 ~ (":" ~ atom ~ ("/" ~ !"0" ~ !"1" ~ integer_10)?)* }

clause            =  { fact | rule }
fact              =  { head ~ "." }
rule              =  { head ~ (rule_once | rule_multi) ~ body ~ "." }
rule_multi        =  { ":-" }
rule_once         =  { "::-" }

head              =  { atom ~ ( "(" ~ params ~ ","? ~ ")" )? }
body              =  { disjunction }

params            =  { named_params | bare_params ~ ("," ~ named_params)? }
named_params      =  { named_param ~ ("," ~ named_param)* }
named_param       =  { atom ~ ":" ~ bare_params }
bare_params       =  { pattern ~ (!("," ~ atom ~ ":") ~ "," ~ pattern)* }

disjunction       =  { branch ~ (";" ~ branch)* }
branch            =  { conjunction ~ ("->>" ~ conjunction)? }
conjunction       =  { procession ~ ("," ~ procession)* }
procession        =  { step ~ (!"->>" ~ "->" ~ step)* }
step              =  { predicate | unification | relation | "(" ~ disjunction ~ ")" }
relation          =  { term? ~ operator ~ term }
unification       =  { expression ~ "=:=" ~ expression }
aggregation       =  { set_aggregation | list_aggregation }
set_aggregation   =  { "{" ~ aggregation_body ~ "}" }
list_aggregation  =  { "[" ~ aggregation_body ~ "]" }
aggregation_body  =  { pattern ~ ":" ~ disjunction }

struct_           =  { atom ~ ( "(" ~ pattern ~ ")" | list | record | set)? }
predicate         =  { scope ~ ( "(" ~ arguments ~ ","? ~ ")" )? }

arguments         =  { named_arguments | bare_arguments ~ ("," ~ named_arguments)? }
named_arguments   =  { named_argument ~ ("," ~ named_argument)* }
named_argument    =  { atom ~ ":" ~ bare_arguments }
bare_arguments    =  { expression ~ (!("," ~ atom ~ ":") ~ "," ~ expression)* }

atom              =  { bare_atom | quoted_atom }
bare_atom         = @{ &XID_START ~ (LOWERCASE_LETTER | OTHER_LETTER) ~ XID_CONTINUE* }
quoted_atom       = @{ PUSH("#"*) ~ "'" ~ (!("'" ~ PEEK) ~ ANY)+ ~ "'" ~ POP }

variable          = @{ &XID_START ~ (UPPERCASE_LETTER | TITLECASE_LETTER) ~ XID_CONTINUE* }
wildcard          = @{ "_" ~ XID_CONTINUE* }

expression        =  { operator* ~ term ~ (operator+ ~ term)* }
term              =  { "(" ~ expression ~ ")" | aggregation | pattern }

operator          = ${ !"=:=" ~ !"->" ~ !"->>" ~ !"!" ~ !"?" ~ operator_symbol+ }
operator_symbol   =  { "-" | "+" | "*" | "/" | "%" | "<" | ">" | "=" | "?" | "$" | "!" | "^" | "&" | "|" | "@" | "\\" | "~" }

pattern           =  { bound_pattern | unbound_pattern | value_pattern }
unbound_pattern   =  { "?" ~ value_pattern? }
bound_pattern     =  { "!" ~ value_pattern? }
value_pattern     =  { list_index | record_index | value }
list_index        =  { (!struct_ ~ value_pattern) ~ "[" ~ value ~ "]" }
record_index      =  { (!struct_ ~ value_pattern) ~ "{" ~ value ~ "}" }
value             =  { variable | wildcard | literal | struct_ | list | record | set }

literal           =  { decimal | integer | string }

integer           =  { integer_2 | integer_16 | integer_10 }
integer_10        = @{ ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)* | "0" }
integer_2         = @{ "0b" ~ ASCII_BIN_DIGIT+ }
integer_16        = @{ "0x" ~ ASCII_HEX_DIGIT+ }

decimal           =  { decimal_10 }
decimal_10        = ${ integer_10 ~ "." ~ integer_10 }

string            = @{ PUSH("#"*) ~ "\"" ~ (!("\"" ~ PEEK) ~ ANY)* ~ "\"" ~ POP }

list              =  { "[" ~ list_entries ~ (tail | ",")? ~ "]" | "[" ~ "]" }
set               =  { "{" ~ list_entries ~ (tail | ",")? ~ "}" | "{" ~ "}" }
list_entries      =  { pattern ~ ("," ~ pattern)* }
record            =  { "{" ~ fields ~ (tail | ",")? ~ "}" | "{" ~ ":" ~ "}" }
fields            =  { field ~ ("," ~ field)* }
field             =  { atom ~ ":" ~ pattern }
tail              =  { "," ~ ".." ~ pattern? }

WHITESPACE        = _{ " " | "\t" | NEWLINE }
COMMENT           = _{ line_comment | block_comment }
line_comment      = _{ "//" ~ (!"\n" ~ ANY)* ~ NEWLINE }
block_comment     = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
