:- use(~(add/3, false/0, true/0)).

:- pub(update/4).
update([], _, _, []).
update([P, ..Rest], P, U, [U, ..Rest]) ::- true.
update([X, ..Rest], P, U, [X, ..NewRest]) :- update(Rest, P, U, NewRest).

:- test(update([1, 2, 3], 1, 4, [4, 2, 3])).
:- test(update([[a, b], [c, d], [e, f]], [c, B], [g, B], [[a, b], [g, d], [e, f]])).
:- test(update([1, 2, 2], 2, 3, [1, 3, 2])).

:- pub(length/2).
length([], 0).
length([_, ..B], Len) :-
    length(B, BLen),
    add(BLen, 1, Len).

:- test(length([], 0)).
:- test(length([1, 2, 3], 3)).
:- test(length([1, 2, 3], A), A =:= 3).

:- pub(in/2).
in(T, ![T, ..]).
in(T, ![_, ..R]) :- in(T, R).

:- test(in(a, [a, b, c])).
:- test(in(b, [a, b, c])).
:- test(in(c, [a, b, c])).
:- test(in(d, [a, b, c]) ->> false; true).
:- test(in(A, [a, b, c]), A =:= a).
:- test(in(A, [a, b, c]), A =:= b).
:- test(in(A, [a, b, c]), A =:= c).

:- pub(notin/2).
notin(_, ![]).
notin(T, ![T, ..]) ::- false.
notin(T, ![_, ..R]) :- notin(T, R).

:- test(notin(a, [1, 2, 3])).
:- test(notin(4, [1, 2, 3])).
:- test(notin(3, [1, 2, 3]) ->> false; true).
:- test(notin(_, [])).

:- pub(remove/3).
remove([], _, []).
remove([X, ..Xs], X, Rx) ::- remove(Xs, X, Rx).
remove([X, ..Xs], Y, [X, ..Rx]) :- remove(Xs, Y, Rx).

:- test(remove([], 3, [])).
:- test(remove([1, 2, 3], 3, [1, 2])).
:- test(remove([1, 2, 3, 4, 5], 3, [1, 2, 4, 5])).
:- test(remove([3, 4, 5], 3, [4, 5])).
:- test(remove([1, 2, 3, 3, 4, 5], 3, [1, 2, 4, 5])).
:- test(remove([3, 3, 3], 3, [])).
:- test(remove([1, 2, _], 3, [1, 2])).
